// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/24/2024 15:34:15"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          modulo_contador_sync_7_bits_descendente
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module modulo_contador_sync_7_bits_descendente_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [6:0] e;
reg load;
// wires                                               
wire [6:0] clr_input_test;
wire [6:0] prst_input_test;
wire [6:0] q_bar;

// assign statements (if any)                          
modulo_contador_sync_7_bits_descendente i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.clr_input_test(clr_input_test),
	.e(e),
	.load(load),
	.prst_input_test(prst_input_test),
	.q_bar(q_bar)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 
// e[ 6 ]
initial
begin
	e[6] = 1'b1;
end 
// e[ 5 ]
initial
begin
	e[5] = 1'b0;
end 
// e[ 4 ]
initial
begin
	e[4] = 1'b0;
end 
// e[ 3 ]
initial
begin
	e[3] = 1'b0;
end 
// e[ 2 ]
initial
begin
	e[2] = 1'b0;
end 
// e[ 1 ]
initial
begin
	e[1] = 1'b0;
end 
// e[ 0 ]
initial
begin
	e[0] = 1'b0;
end 

// load
initial
begin
	load = 1'b0;
end 
endmodule

