// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/17/2024 20:42:46"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          pbl
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module pbl_vlg_vec_tst();
// constants                                           
// general purpose registers
reg ch;
reg clock_50mhz;
reg cq;
reg hh_load;
reg op_c_deboucing;
reg op_deboucing;
reg pg;
reg start_stop;
// wires                                               
wire [3:0] Nac_7segmentos;
wire Nal;
wire [7:0] Nout_7seg;
wire al;
wire ev;
wire m;
wire [1:0] mef_estado;
wire test_Ncontador_mef_controle_state_operador;
wire [4:0] test_buffer_principal;
wire [6:0] test_buffer_secundario;
wire [4:0] test_buffer_secundario_controle_min_rolhas;
wire [6:0] test_buffer_secundario_controle_operador;
wire test_contador_mef_controle_state_operador;
wire test_controle_reset_aux_operador;
wire test_load_reg;
wire test_load_reg_1;
wire test_reset_ff_operador;
wire ve;

// assign statements (if any)                          
pbl i1 (
// port map - connection between master ports and signals/registers   
	.Nac_7segmentos(Nac_7segmentos),
	.Nal(Nal),
	.Nout_7seg(Nout_7seg),
	.al(al),
	.ch(ch),
	.clock_50mhz(clock_50mhz),
	.cq(cq),
	.ev(ev),
	.hh_load(hh_load),
	.m(m),
	.mef_estado(mef_estado),
	.op_c_deboucing(op_c_deboucing),
	.op_deboucing(op_deboucing),
	.pg(pg),
	.start_stop(start_stop),
	.test_Ncontador_mef_controle_state_operador(test_Ncontador_mef_controle_state_operador),
	.test_buffer_principal(test_buffer_principal),
	.test_buffer_secundario(test_buffer_secundario),
	.test_buffer_secundario_controle_min_rolhas(test_buffer_secundario_controle_min_rolhas),
	.test_buffer_secundario_controle_operador(test_buffer_secundario_controle_operador),
	.test_contador_mef_controle_state_operador(test_contador_mef_controle_state_operador),
	.test_controle_reset_aux_operador(test_controle_reset_aux_operador),
	.test_load_reg(test_load_reg),
	.test_load_reg_1(test_load_reg_1),
	.test_reset_ff_operador(test_reset_ff_operador),
	.ve(ve)
);
initial 
begin 
#100000000 $finish;
end 

// clock_50mhz
initial
begin
	clock_50mhz = 1'b1;
	# 10000;
	repeat(4999)
	begin
		clock_50mhz = 1'b0;
		clock_50mhz = #10000 1'b1;
		# 10000;
	end
	clock_50mhz = 1'b0;
end 

// pg
initial
begin
	pg = 1'b1;
end 

// ch
initial
begin
	ch = 1'b1;
end 

// cq
initial
begin
	cq = 1'b0;
end 

// op_c_deboucing
initial
begin
	op_c_deboucing = 1'b1;
	# 10000;
	repeat(19)
	begin
		op_c_deboucing = 1'b0;
		op_c_deboucing = #10000 1'b1;
		# 10000;
	end
	op_c_deboucing = 1'b0;
	op_c_deboucing = #90000 1'b1;
	op_c_deboucing = #80000 1'b0;
end 

// op_deboucing
initial
begin
	op_deboucing = 1'b1;
	op_deboucing = #640000 1'b0;
	op_deboucing = #80000 1'b1;
end 

// start_stop
initial
begin
	start_stop = 1'b1;
end 

// hh_load
initial
begin
	hh_load = 1'b0;
end 
endmodule

