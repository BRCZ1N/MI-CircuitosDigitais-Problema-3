// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/25/2024 21:25:07"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          modulo_registrador_rolhas
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module modulo_registrador_rolhas_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [6:0] e_load;
reg enable;
reg load;
reg [6:0] m_in;
// wires                                               
wire [6:0] m_out;
wire [6:0] test_clr_input;
wire [6:0] test_prst_input;

// assign statements (if any)                          
modulo_registrador_rolhas i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.e_load(e_load),
	.enable(enable),
	.load(load),
	.m_in(m_in),
	.m_out(m_out),
	.test_clr_input(test_clr_input),
	.test_prst_input(test_prst_input)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 
// e_load[ 6 ]
initial
begin
	e_load[6] = 1'b1;
end 
// e_load[ 5 ]
initial
begin
	e_load[5] = 1'b0;
end 
// e_load[ 4 ]
initial
begin
	e_load[4] = 1'b0;
end 
// e_load[ 3 ]
initial
begin
	e_load[3] = 1'b1;
end 
// e_load[ 2 ]
initial
begin
	e_load[2] = 1'b0;
end 
// e_load[ 1 ]
initial
begin
	e_load[1] = 1'b0;
end 
// e_load[ 0 ]
initial
begin
	e_load[0] = 1'b1;
end 

// enable
initial
begin
	enable = 1'b1;
end 

// load
initial
begin
	load = 1'b1;
end 
// m_in[ 6 ]
initial
begin
	m_in[6] = 1'b0;
end 
// m_in[ 5 ]
initial
begin
	m_in[5] = 1'b0;
end 
// m_in[ 4 ]
initial
begin
	m_in[4] = 1'b0;
end 
// m_in[ 3 ]
initial
begin
	m_in[3] = 1'b0;
end 
// m_in[ 2 ]
initial
begin
	m_in[2] = 1'b0;
end 
// m_in[ 1 ]
initial
begin
	m_in[1] = 1'b0;
end 
// m_in[ 0 ]
initial
begin
	m_in[0] = 1'b0;
end 
endmodule

